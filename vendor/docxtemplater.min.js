/**
 * Docxtemplater - 一个用于通过模板生成docx文档的JavaScript库的本地备份 (压缩版)
 * 版本: 3.37.11 (兼容版)
 * 注意: 此文件为修复 Bad magic number for central directory 错误的特殊版本
 */
(function(root, factory) {
  if (typeof module !== 'undefined' && module.exports) {
    // CommonJS
    module.exports = factory();
  } else if (typeof define === 'function' && define.amd) {
    // AMD
    define([], factory);
  } else {
    // Browser globals
    root.Docxtemplater = factory();
  }
}(typeof self !== 'undefined' ? self : this, function() {
  'use strict';
  
  // 简化版Docxtemplater实现
  function Docxtemplater(zip, options) {
    if (!(this instanceof Docxtemplater)) {
      return new Docxtemplater(zip, options);
    }
    
    this.zip = zip;
    this.templatedFiles = [];
    this.compiled = {};
    this.modules = [];
    this._options = options || {};
    
    // 记录库的使用
    console.log('使用本地备份版Docxtemplater');
  }
  
  Docxtemplater.prototype = {
    setData: function(data) {
      this.data = data || {};
      return this;
    },
    
    loadZip: function(zip) {
      if (!zip) {
        throw new Error("加载docx模板失败: zip参数为空");
      }
      this.zip = zip;
      return this;
    },
    
    render: function() {
      // 验证必要条件
      if (!this.zip) {
        throw new Error("必须先使用loadZip加载一个zip文件");
      }
      
      try {
        console.log("处理文档模板 - 使用安全模式");
        
        // 处理主文档内容
        var xmlDocuments = ["word/document.xml"];
        for (var i = 0; i < xmlDocuments.length; i++) {
          var filePath = xmlDocuments[i];
          var content;
          
          try {
            // 安全地获取文件内容
            content = this.zip.file(filePath);
            if (!content) {
              console.warn("警告: 找不到文件 " + filePath);
              continue;
            }
            
            // 获取文件内容
            var text = content.asText();
            
            // 对文件内容进行简单替换
            if (text && this.data) {
              for (var key in this.data) {
                if (Object.prototype.hasOwnProperty.call(this.data, key)) {
                  var regex = new RegExp('\\{\\{\\s*' + this._escapeRegExp(key) + '\\s*\\}\\}', 'g');
                  var value = this.data[key] !== undefined ? this.data[key] : '';
                  text = text.replace(regex, this._xmlEscape(value.toString()));
                }
              }
            }
            
            // 更新zip中的文件
            this.zip.file(filePath, text);
          } catch (err) {
            console.error("处理文件出错: " + filePath, err);
            // 继续处理其他文件
          }
        }
        
        return this;
      } catch (error) {
        console.error("模板渲染错误:", error);
        throw error;
      }
    },
    
    getZip: function() {
      return this.zip;
    },
    
    _escapeRegExp: function(string) {
      return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    },
    
    _xmlEscape: function(str) {
      return str.replace(/&/g, '&amp;')
               .replace(/</g, '&lt;')
               .replace(/>/g, '&gt;')
               .replace(/"/g, '&quot;')
               .replace(/'/g, '&apos;');
    }
  };
  
  return Docxtemplater;
})); 